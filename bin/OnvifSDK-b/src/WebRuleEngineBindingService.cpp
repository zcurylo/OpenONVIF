/* WebRuleEngineBindingService.cpp
   Generated by gSOAP 2.8.21 from web.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "WebRuleEngineBindingService.h"

RuleEngineBindingService::RuleEngineBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	RuleEngineBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RuleEngineBindingService::RuleEngineBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	RuleEngineBindingService_init(_soap->imode, _soap->omode);
}

RuleEngineBindingService::RuleEngineBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	RuleEngineBindingService_init(iomode, iomode);
}

RuleEngineBindingService::RuleEngineBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	RuleEngineBindingService_init(imode, omode);
}

RuleEngineBindingService::~RuleEngineBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void RuleEngineBindingService::RuleEngineBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"xmime", "http://www.w3.org/2005/05/xmlmime", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"dn", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL},
	{"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
	{"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"wsd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void RuleEngineBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void RuleEngineBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	RuleEngineBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
RuleEngineBindingService *RuleEngineBindingService::copy()
{	RuleEngineBindingService *dup = SOAP_NEW_COPY(RuleEngineBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int RuleEngineBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int RuleEngineBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int RuleEngineBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int RuleEngineBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int RuleEngineBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int RuleEngineBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void RuleEngineBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RuleEngineBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *RuleEngineBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void RuleEngineBindingService::soap_noheader()
{	this->soap->header = NULL;
}

void RuleEngineBindingService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, char *wsa__MessageID, wsa__Relationship *wsa__RelatesTo, wsa__EndpointReferenceType *wsa__From, wsa__EndpointReferenceType *wsa__ReplyTo, wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, wsd__AppSequenceType *wsd__AppSequence)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsa__MessageID = wsa__MessageID;
	this->soap->header->wsa__RelatesTo = wsa__RelatesTo;
	this->soap->header->wsa__From = wsa__From;
	this->soap->header->wsa__ReplyTo = wsa__ReplyTo;
	this->soap->header->wsa__FaultTo = wsa__FaultTo;
	this->soap->header->wsa__To = wsa__To;
	this->soap->header->wsa__Action = wsa__Action;
	this->soap->header->wsd__AppSequence = wsd__AppSequence;
}

const SOAP_ENV__Header *RuleEngineBindingService::soap_header()
{	return this->soap->header;
}

int RuleEngineBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET RuleEngineBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET RuleEngineBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int RuleEngineBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int RuleEngineBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tan__GetSupportedRules(RuleEngineBindingService*);
static int serve___tan__CreateRules(RuleEngineBindingService*);
static int serve___tan__DeleteRules(RuleEngineBindingService*);
static int serve___tan__GetRules(RuleEngineBindingService*);
static int serve___tan__ModifyRules(RuleEngineBindingService*);
static int serve___tan__GetServiceCapabilities(RuleEngineBindingService*);
static int serve___tan__GetSupportedAnalyticsModules(RuleEngineBindingService*);
static int serve___tan__CreateAnalyticsModules(RuleEngineBindingService*);
static int serve___tan__DeleteAnalyticsModules(RuleEngineBindingService*);
static int serve___tan__GetAnalyticsModules(RuleEngineBindingService*);
static int serve___tan__ModifyAnalyticsModules(RuleEngineBindingService*);

int RuleEngineBindingService::dispatch()
{	RuleEngineBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:GetSupportedRules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/GetSupportedRules")))
		return serve___tan__GetSupportedRules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:CreateRules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/CreateRules")))
		return serve___tan__CreateRules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:DeleteRules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/DeleteRules")))
		return serve___tan__DeleteRules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:GetRules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/GetRules")))
		return serve___tan__GetRules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:ModifyRules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/ModifyRules")))
		return serve___tan__ModifyRules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:GetServiceCapabilities")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/GetServiceCapabilities")))
		return serve___tan__GetServiceCapabilities(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:GetSupportedAnalyticsModules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/GetSupportedAnalyticsModules")))
		return serve___tan__GetSupportedAnalyticsModules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:CreateAnalyticsModules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/CreateAnalyticsModules")))
		return serve___tan__CreateAnalyticsModules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:DeleteAnalyticsModules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/DeleteAnalyticsModules")))
		return serve___tan__DeleteAnalyticsModules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:GetAnalyticsModules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/GetAnalyticsModules")))
		return serve___tan__GetAnalyticsModules(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "tan:ModifyAnalyticsModules")) || (this->soap->action && !strcmp(this->soap->action, "http://www.onvif.org/ver20/analytics/wsdl/ModifyAnalyticsModules")))
		return serve___tan__ModifyAnalyticsModules(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___tan__GetSupportedRules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__GetSupportedRules soap_tmp___tan__GetSupportedRules;
	_tan__GetSupportedRulesResponse tan__GetSupportedRulesResponse;
	tan__GetSupportedRulesResponse.soap_default(soap);
	soap_default___tan__GetSupportedRules(soap, &soap_tmp___tan__GetSupportedRules);
	if (!soap_get___tan__GetSupportedRules(soap, &soap_tmp___tan__GetSupportedRules, "-tan:GetSupportedRules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetSupportedRules(soap_tmp___tan__GetSupportedRules.tan__GetSupportedRules, tan__GetSupportedRulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__GetSupportedRulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__GetSupportedRulesResponse.soap_put(soap, "tan:GetSupportedRulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__GetSupportedRulesResponse.soap_put(soap, "tan:GetSupportedRulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__CreateRules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__CreateRules soap_tmp___tan__CreateRules;
	_tan__CreateRulesResponse tan__CreateRulesResponse;
	tan__CreateRulesResponse.soap_default(soap);
	soap_default___tan__CreateRules(soap, &soap_tmp___tan__CreateRules);
	if (!soap_get___tan__CreateRules(soap, &soap_tmp___tan__CreateRules, "-tan:CreateRules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateRules(soap_tmp___tan__CreateRules.tan__CreateRules, tan__CreateRulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__CreateRulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__CreateRulesResponse.soap_put(soap, "tan:CreateRulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__CreateRulesResponse.soap_put(soap, "tan:CreateRulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__DeleteRules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__DeleteRules soap_tmp___tan__DeleteRules;
	_tan__DeleteRulesResponse tan__DeleteRulesResponse;
	tan__DeleteRulesResponse.soap_default(soap);
	soap_default___tan__DeleteRules(soap, &soap_tmp___tan__DeleteRules);
	if (!soap_get___tan__DeleteRules(soap, &soap_tmp___tan__DeleteRules, "-tan:DeleteRules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteRules(soap_tmp___tan__DeleteRules.tan__DeleteRules, tan__DeleteRulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__DeleteRulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__DeleteRulesResponse.soap_put(soap, "tan:DeleteRulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__DeleteRulesResponse.soap_put(soap, "tan:DeleteRulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__GetRules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__GetRules soap_tmp___tan__GetRules;
	_tan__GetRulesResponse tan__GetRulesResponse;
	tan__GetRulesResponse.soap_default(soap);
	soap_default___tan__GetRules(soap, &soap_tmp___tan__GetRules);
	if (!soap_get___tan__GetRules(soap, &soap_tmp___tan__GetRules, "-tan:GetRules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetRules(soap_tmp___tan__GetRules.tan__GetRules, tan__GetRulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__GetRulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__GetRulesResponse.soap_put(soap, "tan:GetRulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__GetRulesResponse.soap_put(soap, "tan:GetRulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__ModifyRules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__ModifyRules soap_tmp___tan__ModifyRules;
	_tan__ModifyRulesResponse tan__ModifyRulesResponse;
	tan__ModifyRulesResponse.soap_default(soap);
	soap_default___tan__ModifyRules(soap, &soap_tmp___tan__ModifyRules);
	if (!soap_get___tan__ModifyRules(soap, &soap_tmp___tan__ModifyRules, "-tan:ModifyRules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ModifyRules(soap_tmp___tan__ModifyRules.tan__ModifyRules, tan__ModifyRulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__ModifyRulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__ModifyRulesResponse.soap_put(soap, "tan:ModifyRulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__ModifyRulesResponse.soap_put(soap, "tan:ModifyRulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__GetServiceCapabilities(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__GetServiceCapabilities soap_tmp___tan__GetServiceCapabilities;
	_tan__GetServiceCapabilitiesResponse tan__GetServiceCapabilitiesResponse;
	tan__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___tan__GetServiceCapabilities(soap, &soap_tmp___tan__GetServiceCapabilities);
	if (!soap_get___tan__GetServiceCapabilities(soap, &soap_tmp___tan__GetServiceCapabilities, "-tan:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___tan__GetServiceCapabilities.tan__GetServiceCapabilities, tan__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__GetServiceCapabilitiesResponse.soap_put(soap, "tan:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__GetServiceCapabilitiesResponse.soap_put(soap, "tan:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__GetSupportedAnalyticsModules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__GetSupportedAnalyticsModules soap_tmp___tan__GetSupportedAnalyticsModules;
	_tan__GetSupportedAnalyticsModulesResponse tan__GetSupportedAnalyticsModulesResponse;
	tan__GetSupportedAnalyticsModulesResponse.soap_default(soap);
	soap_default___tan__GetSupportedAnalyticsModules(soap, &soap_tmp___tan__GetSupportedAnalyticsModules);
	if (!soap_get___tan__GetSupportedAnalyticsModules(soap, &soap_tmp___tan__GetSupportedAnalyticsModules, "-tan:GetSupportedAnalyticsModules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetSupportedAnalyticsModules(soap_tmp___tan__GetSupportedAnalyticsModules.tan__GetSupportedAnalyticsModules, tan__GetSupportedAnalyticsModulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__GetSupportedAnalyticsModulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__GetSupportedAnalyticsModulesResponse.soap_put(soap, "tan:GetSupportedAnalyticsModulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__GetSupportedAnalyticsModulesResponse.soap_put(soap, "tan:GetSupportedAnalyticsModulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__CreateAnalyticsModules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__CreateAnalyticsModules soap_tmp___tan__CreateAnalyticsModules;
	_tan__CreateAnalyticsModulesResponse tan__CreateAnalyticsModulesResponse;
	tan__CreateAnalyticsModulesResponse.soap_default(soap);
	soap_default___tan__CreateAnalyticsModules(soap, &soap_tmp___tan__CreateAnalyticsModules);
	if (!soap_get___tan__CreateAnalyticsModules(soap, &soap_tmp___tan__CreateAnalyticsModules, "-tan:CreateAnalyticsModules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateAnalyticsModules(soap_tmp___tan__CreateAnalyticsModules.tan__CreateAnalyticsModules, tan__CreateAnalyticsModulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__CreateAnalyticsModulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__CreateAnalyticsModulesResponse.soap_put(soap, "tan:CreateAnalyticsModulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__CreateAnalyticsModulesResponse.soap_put(soap, "tan:CreateAnalyticsModulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__DeleteAnalyticsModules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__DeleteAnalyticsModules soap_tmp___tan__DeleteAnalyticsModules;
	_tan__DeleteAnalyticsModulesResponse tan__DeleteAnalyticsModulesResponse;
	tan__DeleteAnalyticsModulesResponse.soap_default(soap);
	soap_default___tan__DeleteAnalyticsModules(soap, &soap_tmp___tan__DeleteAnalyticsModules);
	if (!soap_get___tan__DeleteAnalyticsModules(soap, &soap_tmp___tan__DeleteAnalyticsModules, "-tan:DeleteAnalyticsModules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteAnalyticsModules(soap_tmp___tan__DeleteAnalyticsModules.tan__DeleteAnalyticsModules, tan__DeleteAnalyticsModulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__DeleteAnalyticsModulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__DeleteAnalyticsModulesResponse.soap_put(soap, "tan:DeleteAnalyticsModulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__DeleteAnalyticsModulesResponse.soap_put(soap, "tan:DeleteAnalyticsModulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__GetAnalyticsModules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__GetAnalyticsModules soap_tmp___tan__GetAnalyticsModules;
	_tan__GetAnalyticsModulesResponse tan__GetAnalyticsModulesResponse;
	tan__GetAnalyticsModulesResponse.soap_default(soap);
	soap_default___tan__GetAnalyticsModules(soap, &soap_tmp___tan__GetAnalyticsModules);
	if (!soap_get___tan__GetAnalyticsModules(soap, &soap_tmp___tan__GetAnalyticsModules, "-tan:GetAnalyticsModules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAnalyticsModules(soap_tmp___tan__GetAnalyticsModules.tan__GetAnalyticsModules, tan__GetAnalyticsModulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__GetAnalyticsModulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__GetAnalyticsModulesResponse.soap_put(soap, "tan:GetAnalyticsModulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__GetAnalyticsModulesResponse.soap_put(soap, "tan:GetAnalyticsModulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tan__ModifyAnalyticsModules(RuleEngineBindingService *service)
{	struct soap *soap = service->soap;
	struct __tan__ModifyAnalyticsModules soap_tmp___tan__ModifyAnalyticsModules;
	_tan__ModifyAnalyticsModulesResponse tan__ModifyAnalyticsModulesResponse;
	tan__ModifyAnalyticsModulesResponse.soap_default(soap);
	soap_default___tan__ModifyAnalyticsModules(soap, &soap_tmp___tan__ModifyAnalyticsModules);
	if (!soap_get___tan__ModifyAnalyticsModules(soap, &soap_tmp___tan__ModifyAnalyticsModules, "-tan:ModifyAnalyticsModules", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->ModifyAnalyticsModules(soap_tmp___tan__ModifyAnalyticsModules.tan__ModifyAnalyticsModules, tan__ModifyAnalyticsModulesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	tan__ModifyAnalyticsModulesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tan__ModifyAnalyticsModulesResponse.soap_put(soap, "tan:ModifyAnalyticsModulesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tan__ModifyAnalyticsModulesResponse.soap_put(soap, "tan:ModifyAnalyticsModulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
